## Project Structure (Current Implementation)

```
src/
├── app/                    # Next.js App Router
│   ├── (auth)/            # Authentication routes
│   │   ├── login/page.tsx # Login page with shadcn/ui
│   │   ├── register/page.tsx # Registration page with two-tier system
│   │   └── invite/[id]/page.tsx # Invitation acceptance page
│   ├── (dashboard)/       # Dashboard routes
│   │   └── [env]/         # Partner-specific routes
│   │       ├── layout.tsx # Dashboard layout with sidebar
│   │       ├── page.tsx   # Dashboard overview
│   │       ├── products/  # Product management
│   │       ├── locations/ # Location management
│   │       ├── members/   # Member management
│   │       ├── analytics/ # Analytics dashboard
│   │       └── settings/  # Partner settings
│   ├── admin/             # Admin routes
│   │   ├── layout.tsx     # Admin layout
│   │   ├── page.tsx       # Admin dashboard
│   │   └── environments/page.tsx # Partner management
│   ├── api/               # API routes
│   │   ├── email/send/route.ts # Email sending
│   │   ├── environments/[slug]/route.ts # Partner API
│   │   └── locations/[id]/route.ts # Location API
│   ├── auth/callback/route.ts # Auth callback
│   ├── dashboard/page.tsx # Dashboard redirect
│   ├── layout.tsx         # Root layout
│   ├── page.tsx           # Home page (redirects to login)
│   └── globals.css        # Global styles with CSS variables
├── components/            # React components
│   ├── ui/               # shadcn/ui components (generated)
│   ├── dashboard/        # Dashboard-specific components
│   │   ├── environment-switcher.tsx # Partner switcher with Command/Popover
│   │   └── page-breadcrumb.tsx # Page breadcrumbs
│   ├── data-table/       # Table components with filtering/sorting
│   ├── product/          # Product-specific components
│   │   ├── product-dialog.tsx # Product creation/editing
│   │   ├── product-detail-dialog.tsx # Product details
│   │   ├── products-table-wrapper.tsx # Products table
│   │   ├── import-products-dialog.tsx # CSV import
│   │   └── category-selector.tsx # Category selection
│   ├── location/         # Location components
│   │   ├── location-dialog.tsx # Location creation/editing
│   │   └── location-card.tsx # Location display
│   ├── members/          # Member management
│   │   ├── invite-member-dialog.tsx # Member invitations
│   │   └── members-data-table.tsx # Members table
│   ├── settings/         # Settings components
│   │   └── settings-form.tsx # User settings
│   ├── auth/             # Authentication components
│   │   └── accept-invite-form.tsx # Invitation acceptance
│   ├── email/            # Email components
│   │   └── test-email-button.tsx # Email testing
│   ├── app-sidebar.tsx   # Main sidebar component
│   ├── login-form.tsx    # Login form
│   ├── register-form.tsx # Registration form with two-tier system
│   └── logout-button.tsx # Logout button
├── lib/                  # Utility libraries
│   ├── supabase/         # Supabase clients and auth
│   │   ├── client-browser.ts # Browser client
│   │   ├── client-server.ts  # Server client (fixed cookie handling)
│   │   └── auth.ts       # Authentication utilities
│   ├── db/               # Database operations
│   │   ├── environments/ # Partner operations
│   │   │   ├── get-environments.ts # Get partners for user/by slug
│   │   │   ├── create-environment.ts # Create new partner
│   │   │   ├── update-environment.ts # Update partner
│   │   │   └── get-user-environments.ts # Get user's partners
│   │   ├── products/     # Product operations
│   │   │   ├── get-products.ts # Get products for partner
│   │   │   ├── create-product.ts # Create new product
│   │   │   ├── update-product.ts # Update product
│   │   │   ├── delete-product.ts # Delete product
│   │   │   ├── import-products.ts # CSV import
│   │   │   ├── bulk-actions.ts # Bulk operations
│   │   │   └── get-dashboard-stats.ts # Dashboard statistics
│   │   ├── locations/    # Location operations
│   │   │   ├── get-locations.ts # Get locations for partner
│   │   │   ├── create-location.ts # Create new location
│   │   │   └── get-location-stats.ts # Location statistics
│   │   ├── profiles/     # Profile operations
│   │   │   ├── get-profile.ts # Get user profile
│   │   │   └── update-profile.ts # Update profile
│   │   └── members/      # Member operations
│   │       ├── invite-member.ts # Invite new member
│   │       ├── get-members.ts # Get partner members
│   │       └── accept-invite.ts # Accept invitation
│   ├── email/            # Email functionality
│   │   ├── email-service.ts # Email sending service
│   │   ├── email-templates.ts # Email templates
│   │   ├── email-config.ts # Email configuration
│   │   └── email-actions.ts # Email server actions
│   └── utils/            # Utility functions
│       ├── cn.ts         # Class name utility
│       ├── rbac.ts       # Role-based access control
│       ├── urls.ts       # URL builders
│       ├── categories.ts # Product categories
│       ├── email-templates.ts # Email template helpers
│       └── zod-schemas/  # Validation schemas
│           ├── product.ts
│           ├── environment.ts
│           └── invite.ts
├── hooks/                # Custom React hooks
│   ├── use-toast.ts      # Toast notifications
│   ├── use-email.ts      # Email functionality
│   └── use-mobile.tsx    # Mobile detection
├── middleware.ts         # Next.js middleware for auth
└── types/                # TypeScript type definitions
    └── db.ts             # Database types and enums
```

---

## Database Schema (Production Ready)

### Core Tables

- `profiles` - User profiles with authentication and account types
- `partners` - Multi-tenant partners with logo support
- `memberships` - User-partner relationships with roles
- `locations` - Physical locations within partners
- `products` - Product inventory with full metadata
- `product_status_history` - Status change tracking
- `product_comments` - Product discussions
- `product_images` - Product image metadata
- `sales` - Sales records
- `partner_invites` - User invitations with expiration
- `invite_codes` - Partner invite codes with usage tracking

### Enums

- `role`: admin, store_manager (Partner Managers only)
- `product_status`: taken, in_repair, selling, sold, returned, discarded

### Database Functions & Triggers

- `handle_new_user_registration()` - Creates profiles, partners, and memberships
- `on_new_user_registration` - Trigger for new user registration
- `enforce_environment_ownership_trigger` - Protects partner ownership

### RLS Policies

- All tables have Row Level Security enabled
- Partner-based data access control
- Role-based permissions
- Secure invitation system

---

## Current Working Features

### ✅ Authentication & Authorization

- Complete Supabase Auth integration with two-tier registration
- Role-based access control (RBAC)
- Secure session management
- Partner-based permissions
- Invitation system with email notifications

### ✅ Multi-Tenant Partner System

- Partner-based routing with `[env]` parameter
- Complete data isolation between partners
- Partner switcher with logos and keyboard shortcuts
- Admin-only partner creation with logo upload
- User invitation and membership management (Partner Managers only)

### ✅ Registration System

- **Two-Tier Registration**: Admin and Partner account types
- **Admin Registration**: Creates own partner dashboard
- **Partner Registration**: Joins existing partner via invite code
- **Database Triggers**: Automatic profile, partner, and membership creation
- **UI Clarity**: Clear labeling for business vs team member accounts

### ✅ Dashboard & Navigation

- Partner-specific dashboard layouts
- Sidebar navigation with partner switcher and logos
- SPA-style navigation (no full page reloads)
- Active route highlighting
- Breadcrumb navigation
- Mobile-responsive design with bottom navigation

### ✅ Product Management

- Complete CRUD operations for products
- Product status tracking with history
- Category system with hierarchical organization
- CSV import with validation and error handling
- Bulk operations (status updates, deletion)
- Product search and filtering
- Image upload support (schema ready)
- Action buttons integrated into table toolbar

### ✅ Location Management

- Location CRUD operations
- Location-specific product tracking
- Contact information management
- Location statistics and analytics
- Responsive grid layout

### ✅ Member Management

- User invitation system with invite codes
- Role assignment and management (Partner Managers only)
- Member activity tracking
- Partner access control
- Action buttons integrated into table toolbar

### ✅ Analytics & Reporting

- Dashboard statistics and metrics
- Product status distribution
- Revenue tracking
- Time-to-sale analytics
- Location-based reporting
- Modern bar charts and visualizations

### ✅ Settings & Configuration

- User profile management
- Partner settings
- Notification preferences
- Security settings

### ✅ Theme System

- Complete dark/light mode implementation
- Theme-aware CSS variables
- Consistent theming across all components
- Theme toggle in sidebar and mobile menu

---

## Development Guidelines

### Code Style

- Follow Standard.js rules (2 spaces, no semicolons, camelCase)
- Use functional components with hooks
- Prefer server components over client components
- Use TypeScript for type safety
- Follow the established file structure

### Navigation Rules

- Use `import Link from "next/link"` for all navigation
- Use `const router = useRouter(); router.push(url)` for programmatic navigation
- All routes render inside the dashboard layout - no full refresh
- Sidebar items use Link and highlight active routes
- Partner-based routing: `/[env]/[section]`

### UI Rules

- Use shadcn/ui components only - no native HTML styling
- Import from `@/components/ui/[component]`
- Use Tailwind CSS for styling
- Follow shadcn/ui design patterns
- Ensure mobile responsiveness
- Use theme-aware CSS variables (`bg-popover`, `text-popover-foreground`, etc.)

### Table Component Rules

- **Action Buttons**: Place action buttons (Add Product, Invite Users, etc.) in the table toolbar alongside filter and view options, not as separate buttons near page headings
- **DataTable Props**: Use `actionButtons` prop to pass custom buttons to table toolbar
- **Filter Placeholders**: Use `filterPlaceholder` prop for context-appropriate filtering (e.g., "Filter products...", "Filter members...")
- **Mobile Layout**: Use `space-y-4` instead of `flex items-center justify-between` for page headers to ensure proper mobile stacking
- **Row Selection**: Disabled by default (`enableRowSelection: false`) - only enable when bulk actions are needed
- **Default Page Size**: Set to 10 rows (`initialState: { pagination: { pageSize: 10 } }`)
- **Pagination Display**: Show "X total row(s)" instead of selection count, hide "Rows per page" selector

### Data Fetching

- Use React Server Components for data fetching where possible
- Use server actions for mutations
- Implement proper error handling
- Use revalidatePath/router.refresh() after mutations
- Partner-scoped data access

### Security Rules

- All routes require authentication
- Partner-based data access control
- Role-based permissions
- Input validation with Zod schemas
- Secure API endpoints with RLS

---

## Production Setup

### 1. Environment Variables

```env
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

# Email Configuration (Resend)
RESEND_API_KEY=your_resend_api_key
EMAIL_FROM_ADDRESS=noreply@your-domain.com
NEXT_PUBLIC_APP_URL=https://your-domain.com

# Optional: Debug Configuration
DEBUG_EMAILS=false
```

### 2. Database Setup

```bash
# Run all migrations in order
supabase/migrations/001_initial_schema.sql
supabase/migrations/002_create_storage_bucket.sql
supabase/migrations/003_rename_environments_to_partners.sql
supabase/migrations/004_fix_storage_policies.sql
supabase/migrations/005_enable_user_registration.sql
supabase/migrations/20250828051404_remote_migration.sql
```

### 3. Admin User Creation

```bash
node scripts/create-admin-user.js
```

### 4. Partner Creation

- Use admin dashboard to create production partners
- Invite team members with appropriate roles
- Configure partner settings

---

## Testing the Implementation

### Start Development Server

```bash
npm run dev
```

### Test Routes

- **Login**: http://localhost:3000/login
- **Registration**: http://localhost:3000/register
- **Admin Dashboard**: http://localhost:3000/admin
- **Partner Dashboard**: http://localhost:3000/[env]
- **Products**: http://localhost:3000/[env]/products
- **Locations**: http://localhost:3000/[env]/locations
- **Members**: http://localhost:3000/[env]/members
- **Analytics**: http://localhost:3000/[env]/analytics
- **Settings**: http://localhost:3000/[env]/settings

### Testing the Registration System

1. **Admin Registration**:
   - Go to `/register`
   - Select "For businesses" account type
   - Fill in company name and personal details
   - Verify account creation and partner dashboard setup

2. **Partner Registration**:
   - Generate invite code from admin dashboard
   - Share invite code or direct link
   - Test partner registration with invite code
   - Verify partner activation and dashboard access

### Current Working Features

- ✅ Complete authentication system with two-tier registration
- ✅ Multi-tenant partner management with logo support
- ✅ Product management with CSV import and status tracking
- ✅ Location management with responsive grid layout
- ✅ Member management with invite codes system
- ✅ Analytics and reporting with modern charts
- ✅ Settings and configuration
- ✅ Mobile-responsive design with bottom navigation
- ✅ Complete theme system (dark/light mode)
- ✅ TypeScript compilation
- ✅ All components working
- ✅ Partner logo support and display
- ✅ Invite codes management and tracking
- ✅ Partner activation flow
- ✅ Email system with Resend integration
- ✅ Database triggers and functions working correctly

---

## Acceptance Criteria Status

1. ✅ **Authentication**: Complete Supabase Auth integration with two-tier registration
2. ✅ **Multi-Tenancy**: Partner-based data isolation with logo support
3. ✅ **Navigation**: All navigation uses Next.js routing
4. ✅ **UI Components**: Every component uses shadcn/ui
5. ✅ **RLS**: Row-level security implemented
6. ✅ **Product Management**: Complete CRUD with status tracking
7. ✅ **CSV Import**: Bulk import with validation
8. ✅ **Member Management**: Invitation system with invite codes (Partner Managers only)
9. ✅ **Analytics**: Dashboard statistics and reporting with charts
10. ✅ **Security**: Comprehensive security measures
11. ✅ **Theme System**: Complete dark/light mode implementation
12. ✅ **Mobile Responsiveness**: Bottom navigation and responsive layouts
13. ✅ **Invite Codes**: Complete invite code system with usage tracking
14. ✅ **Partner Activation**: Secure partner activation flow
15. ✅ **Email System**: Email notifications and invitations

---

## File Updates Made

### Recently Completed

- ✅ Removed all demo content and functionality
- ✅ Updated all database functions for production use
- ✅ Implemented complete authentication system with two-tier registration
- ✅ Added partner-based access control with logo support
- ✅ Updated all components for real data
- ✅ Implemented invitation system with invite codes (Partner Managers only)
- ✅ Added email functionality with Resend integration
- ✅ Updated documentation for production
- ✅ Integrated action buttons into table toolbars
- ✅ Improved mobile responsiveness and table display
- ✅ Added partner logo support in sidebar and switcher
- ✅ Implemented complete theme system with dark/light mode
- ✅ Added mobile bottom navigation and responsive layouts
- ✅ Fixed dialog backgrounds to use theme-aware styling
- ✅ Updated stats grids for mobile responsiveness
- ✅ Added modern bar charts for analytics
- ✅ Improved location management with responsive grid layout
- ✅ Implemented invite codes system with usage tracking
- ✅ Added partner activation flow
- ✅ Created invite codes management interface
- ✅ Updated registration form with step-by-step flow
- ✅ Added URL parameter support for invite codes
- ✅ Fixed database trigger issues for user registration
- ✅ Updated registration form UI text for clarity
- ✅ Resolved "created_by cannot be modified" database errors

### Current Working Files

- All TypeScript files compile without errors
- All components render correctly
- Navigation works as expected
- Database operations work with real data
- Email system functional with Resend
- Security measures implemented
- Theme system fully functional
- Mobile responsiveness complete
- Invite codes system fully operational
- Partner activation flow working
- Registration system with two-tier accounts working
- Database triggers and functions working correctly

---

**Status**: 🟢 **PRODUCTION READY**

The application is now production-ready with complete multi-tenant functionality, proper authentication with two-tier registration system, comprehensive security measures, full theme system, mobile-responsive design, and complete invite codes system. All demo content has been removed and the system works exclusively with real partners and user data.
