---
alwaysApply: true
---

## Project Structure (Current Implementation)

```
src/
â”œâ”€â”€ app/                    # Next.js App Router
â”‚   â”œâ”€â”€ (auth)/            # Authentication routes
â”‚   â”‚   â””â”€â”€ login/page.tsx # Login page with shadcn/ui
â”‚   â”œâ”€â”€ (dashboard)/       # Dashboard routes
â”‚   â”‚   â”œâ”€â”€ [env]/         # Environment-specific routes
â”‚   â”‚   â”‚   â”œâ”€â”€ layout.tsx # Dashboard layout with sidebar
â”‚   â”‚   â”‚   â”œâ”€â”€ page.tsx   # Dashboard overview
â”‚   â”‚   â”‚   â”œâ”€â”€ products/  # Product management
â”‚   â”‚   â”‚   â”œâ”€â”€ locations/ # Location management
â”‚   â”‚   â”‚   â”œâ”€â”€ members/   # Member management
â”‚   â”‚   â”‚   â””â”€â”€ analytics/ # Analytics dashboard
â”‚   â”‚   â””â”€â”€ demo/          # Demo environment for testing
â”‚   â”‚       â”œâ”€â”€ layout.tsx # Demo layout with SidebarProvider
â”‚   â”‚       â”œâ”€â”€ page.tsx   # Demo dashboard
â”‚   â”‚       â””â”€â”€ [sections]/ # Demo pages for all sections
â”‚   â”œâ”€â”€ layout.tsx         # Root layout
â”‚   â”œâ”€â”€ page.tsx           # Home page (redirects to login)
â”‚   â””â”€â”€ globals.css        # Global styles with CSS variables
â”œâ”€â”€ components/            # React components
â”‚   â”œâ”€â”€ ui/               # shadcn/ui components (generated)
â”‚   â”œâ”€â”€ dashboard/        # Dashboard-specific components
â”‚   â”‚   â””â”€â”€ environment-switcher.tsx # Environment switcher with Command/Popover
â”‚   â”œâ”€â”€ data-table/       # Table components (ready for implementation)
â”‚   â”œâ”€â”€ product/          # Product-specific components (ready for implementation)
â”‚   â””â”€â”€ app-sidebar.tsx   # Main sidebar component (updated for environments)
â”œâ”€â”€ lib/                  # Utility libraries
â”‚   â”œâ”€â”€ supabase/         # Supabase clients and auth
â”‚   â”‚   â”œâ”€â”€ client-browser.ts # Browser client
â”‚   â”‚   â”œâ”€â”€ client-server.ts  # Server client (fixed cookie handling)
â”‚   â”‚   â””â”€â”€ auth.ts       # Authentication utilities
â”‚   â”œâ”€â”€ db/               # Database operations
â”‚   â”‚   â”œâ”€â”€ environments/ # Environment operations
â”‚   â”‚   â”‚   â””â”€â”€ get-environments.ts # Get environments for user/by slug
â”‚   â”‚   â””â”€â”€ products/     # Product operations
â”‚   â”‚       â””â”€â”€ get-dashboard-stats.ts # Dashboard statistics
â”‚   â””â”€â”€ utils/            # Utility functions
â”‚       â”œâ”€â”€ cn.ts         # Class name utility
â”‚       â”œâ”€â”€ rbac.ts       # Role-based access control
â”‚       â”œâ”€â”€ urls.ts       # URL builders
â”‚       â””â”€â”€ zod-schemas/  # Validation schemas
â”‚           â”œâ”€â”€ product.ts
â”‚           â”œâ”€â”€ environment.ts
â”‚           â””â”€â”€ invite.ts
â”œâ”€â”€ hooks/                # Custom React hooks
â”‚   â””â”€â”€ use-toast.ts      # Toast notifications
â””â”€â”€ types/                # TypeScript type definitions
    â””â”€â”€ db.ts             # Database types and enums
```

---

## Database Schema (Ready for Implementation)

### Core Tables

- `profiles` - User profiles
- `environments` - Multi-tenant environments
- `memberships` - User-environment relationships with roles
- `locations` - Physical locations within environments
- `products` - Product inventory
- `product_status_history` - Status change tracking
- `product_comments` - Product discussions
- `product_images` - Product image metadata
- `sales` - Sales records
- `environment_invites` - User invitations

### Enums

- `role`: grady_admin, grady_staff, reseller_manager, reseller_staff
- `product_status`: taken, in_repair, selling, sold, returned, discarded

### RLS Policies

- All tables have Row Level Security enabled
- Environment-based access control
- Role-based permissions

---

## Current Working Features

### âœ… Authentication Flow

- Login page at `/login` with shadcn/ui styling
- Demo authentication that redirects to `/demo`
- Ready for Supabase Auth integration

### âœ… Dashboard Layout

- Environment-based routing with `[env]` parameter
- Sidebar navigation with environment switcher
- SPA-style navigation (no full page reloads)
- Active route highlighting based on usePathname()

### âœ… Environment Switcher

- Popover with Command component for environment selection
- Keyboard shortcuts support (ready for âŒ˜1..âŒ˜9)
- "Add Environment" dialog with form
- Link-based navigation between environments

### âœ… Demo Environment

- Working demo dashboard at `/demo`
- Environment switcher with multiple environments
- Navigation between all sections (Products, Locations, Members, Analytics)
- Dashboard cards with sample data
- Proper SidebarProvider wrapper

### âœ… Component Architecture

- All shadcn/ui components installed and working
- Proper TypeScript types throughout
- Zod validation schemas ready
- RBAC system implemented
- URL builders for consistent routing

---

## Development Guidelines

### Code Style

- Follow Standard.js rules (2 spaces, no semicolons, camelCase)
- Use functional components with hooks
- Prefer server components over client components
- Use TypeScript for type safety
- Follow the established file structure

### Navigation Rules

- Use `import Link from "next/link"` for all navigation
- Use `const router = useRouter(); router.push(url)` for programmatic navigation
- All routes render inside the dashboard layout - no full refresh
- Sidebar items use Link and highlight active routes

### UI Rules

- Use shadcn/ui components only - no native HTML styling
- Import from `@/components/ui/[component]`
- Use Tailwind CSS for styling
- Follow shadcn/ui design patterns

### Data Fetching

- Use React Server Components for data fetching where possible
- Use server actions for mutations
- Implement proper error handling
- Use revalidatePath/router.refresh() after mutations

---

## Next Steps for Development

### 1. Database Setup

```bash
# Run the SQL migration in Supabase dashboard
# File: supabase/migrations/001_initial_schema.sql
```

### 2. Environment Variables

```env
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
```

### 3. Authentication Implementation

- Replace demo authentication with Supabase Auth
- Implement proper session management
- Add user profile management

### 4. Data Layer Implementation

- Connect database functions to real Supabase queries
- Implement server actions for CRUD operations
- Add proper error handling and loading states

### 5. Feature Development

- Build product management interface
- Implement image uploads
- Add data tables with filtering
- Create analytics dashboard
- Add barcode scanning

---

## Testing the Current Implementation

### Start Development Server

```bash
npm run dev
```

### Test Routes

- **Login**: http://localhost:3000/login
- **Demo Dashboard**: http://localhost:3000/demo
- **Demo Products**: http://localhost:3000/demo/products
- **Demo Locations**: http://localhost:3000/demo/locations
- **Demo Members**: http://localhost:3000/demo/members
- **Demo Analytics**: http://localhost:3000/demo/analytics

### Current Working Features

- âœ… Login page with form
- âœ… Demo dashboard with cards
- âœ… Environment switcher
- âœ… Sidebar navigation
- âœ… SPA-style routing
- âœ… shadcn/ui styling
- âœ… TypeScript compilation
- âœ… All components working

---

## Acceptance Criteria Status

1. âœ… **Navigation**: All navigation uses next/link or router.push() - no full
   reloads
2. âœ… **UI Components**: Every button/table/input/dialog comes from shadcn/ui
3. ðŸš§ **RLS**: Database schema ready, needs Supabase connection
4. ðŸš§ **Product Status**: Schema ready, needs implementation
5. ðŸš§ **Image Uploads**: Schema ready, needs implementation
6. âœ… **Modular Code**: One operation per file, feature folders, clear
   boundaries

---

## File Updates Made

### Recently Fixed Issues

- âœ… Fixed TypeScript errors in database functions
- âœ… Fixed Supabase client cookie handling
- âœ… Added SidebarProvider wrapper to layouts
- âœ… Removed conflicting route files
- âœ… Updated environment switcher with proper types
- âœ… Fixed demo environment data structure

### Current Working Files

- All TypeScript files compile without errors
- All components render correctly
- Navigation works as expected
- Demo environment fully functional

---

**Status**: ðŸŸ¢ **READY FOR FEATURE DEVELOPMENT**

The foundation is complete and solid. All core infrastructure is working. Ready
to implement real data connections and build out the remaining features.

pages, implement server actions, and apply RLS. Include a README.md with setup
and migration steps.
