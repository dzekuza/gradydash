---
alwaysApply: true
---

## Current Working Features

### âœ… Authentication & Authorization

- Complete Supabase Auth integration
- Role-based access control (RBAC)
- Secure session management
- Environment-based permissions
- Invitation system with email notifications

### âœ… Multi-Tenant Environment System

- Environment-based routing with `[env]` parameter
- Complete data isolation between environments
- Environment switcher with keyboard shortcuts
- Admin-only environment creation
- User invitation and membership management

### âœ… Dashboard & Navigation

- Environment-specific dashboard layouts
- Sidebar navigation with environment switcher
- SPA-style navigation (no full page reloads)
- Active route highlighting
- Breadcrumb navigation
- Mobile-responsive design

### âœ… Product Management

- Complete CRUD operations for products
- Product status tracking with history
- Category system with hierarchical organization
- CSV import with validation and error handling
- Bulk operations (status updates, deletion)
- Product search and filtering
- Image upload support (schema ready)

### âœ… Location Management

- Location CRUD operations
- Location-specific product tracking
- Contact information management
- Location statistics and analytics

### âœ… Member Management

- User invitation system
- Role assignment and management
- Member activity tracking
- Environment access control

### âœ… Analytics & Reporting

- Dashboard statistics and metrics
- Product status distribution
- Revenue tracking
- Time-to-sale analytics
- Location-based reporting

### âœ… Settings & Configuration

- User profile management
- Environment settings
- Notification preferences
- Security settings

---

## Development Guidelines

### Code Style

- Follow Standard.js rules (2 spaces, no semicolons, camelCase)
- Use functional components with hooks
- Prefer server components over client components
- Use TypeScript for type safety
- Follow the established file structure

### Navigation Rules

- Use `import Link from "next/link"` for all navigation
- Use `const router = useRouter(); router.push(url)` for programmatic navigation
- All routes render inside the dashboard layout - no full refresh
- Sidebar items use Link and highlight active routes
- Environment-based routing: `/[env]/[section]`

### UI Rules

- Use shadcn/ui components only - no native HTML styling
- Import from `@/components/ui/[component]`
- Use Tailwind CSS for styling
- Follow shadcn/ui design patterns
- Ensure mobile responsiveness

### Data Fetching

- Use React Server Components for data fetching where possible
- Use server actions for mutations
- Implement proper error handling
- Use revalidatePath/router.refresh() after mutations
- Environment-scoped data access

### Security Rules

- All routes require authentication
- Environment-based data access control
- Role-based permissions
- Input validation with Zod schemas
- Secure API endpoints with RLS

---

## Production Setup

### 1. Environment Variables

```env
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

# Email Configuration (Resend)
RESEND_API_KEY=your_resend_api_key
EMAIL_FROM_ADDRESS=noreply@your-domain.com
NEXT_PUBLIC_APP_URL=https://your-domain.com

# Optional: Debug Configuration
DEBUG_EMAILS=false
```

### 2. Database Setup

```bash
# Run all migrations in order
supabase/migrations/001_initial_schema.sql
supabase/migrations/002_add_system_admin_support.sql
supabase/migrations/003_fix_environment_access_policies.sql
supabase/migrations/004_fix_rls_policies.sql
supabase/migrations/005_add_product_import_fields.sql
supabase/migrations/006_add_location_contact_fields.sql
```

### 3. Admin User Creation

```bash
node scripts/create-admin-user.js
```

### 4. Environment Creation

- Use admin dashboard to create production environments
- Invite team members with appropriate roles
- Configure environment settings

---

## Testing the Implementation

### Start Development Server

```bash
npm run dev
```

### Test Routes

- **Login**: http://localhost:3000/login
- **Admin Dashboard**: http://localhost:3000/admin
- **Environment Dashboard**: http://localhost:3000/[env]
- **Products**: http://localhost:3000/[env]/products
- **Locations**: http://localhost:3000/[env]/locations
- **Members**: http://localhost:3000/[env]/members
- **Analytics**: http://localhost:3000/[env]/analytics
- **Settings**: http://localhost:3000/[env]/settings

### Current Working Features

- âœ… Complete authentication system
- âœ… Multi-tenant environment management
- âœ… Product management with CSV import
- âœ… Location management
- âœ… Member management with invitations
- âœ… Analytics and reporting
- âœ… Settings and configuration
- âœ… Mobile-responsive design
- âœ… TypeScript compilation
- âœ… All components working

---

## Acceptance Criteria Status

1. âœ… **Authentication**: Complete Supabase Auth integration
2. âœ… **Multi-Tenancy**: Environment-based data isolation
3. âœ… **Navigation**: All navigation uses Next.js routing
4. âœ… **UI Components**: Every component uses shadcn/ui
5. âœ… **RLS**: Row-level security implemented
6. âœ… **Product Management**: Complete CRUD with status tracking
7. âœ… **CSV Import**: Bulk import with validation
8. âœ… **Member Management**: Invitation system with roles
9. âœ… **Analytics**: Dashboard statistics and reporting
10. âœ… **Security**: Comprehensive security measures

---

## File Updates Made

### Recently Completed

- âœ… Removed all demo content and functionality
- âœ… Updated all database functions for production use
- âœ… Implemented complete authentication system
- âœ… Added environment-based access control
- âœ… Updated all components for real data
- âœ… Implemented invitation system
- âœ… Added email functionality
- âœ… Updated documentation for production

### Current Working Files

- All TypeScript files compile without errors
- All components render correctly
- Navigation works as expected
- Database operations work with real data
- Email system functional
- Security measures implemented

---

**Status**: ðŸŸ¢ **PRODUCTION READY**

The application is now production-ready with complete multi-tenant
functionality, proper authentication, and comprehensive security measures. All
demo content has been removed and the system works exclusively with real
environments and user data.

pages, implement server actions, and apply RLS. Include a README.md with setup
and migration steps.
